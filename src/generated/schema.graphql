### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Academy {
  id: ID!
  imageName: String!
  name: String!
  schools(after: ID, before: ID, first: Int, last: Int, skip: Int): [School!]!
}

input AcademyCreateInput {
  id: ID
  imageName: String!
  name: String!
  schools: SchoolCreateManyWithoutSchoolsInput
}

input AcademyCreateOneWithoutAcademyInput {
  connect: AcademyWhereUniqueInput
  create: AcademyCreateWithoutSchoolsInput
}

input AcademyCreateWithoutSchoolsInput {
  id: ID
  imageName: String!
  name: String!
}

input AcademyUpdateOneRequiredWithoutSchoolsInput {
  connect: AcademyWhereUniqueInput
  create: AcademyCreateWithoutSchoolsInput
  update: AcademyUpdateWithoutSchoolsDataInput
  upsert: AcademyUpsertWithoutSchoolsInput
}

input AcademyUpdateWithoutSchoolsDataInput {
  id: ID
  imageName: String
  name: String
}

input AcademyUpsertWithoutSchoolsInput {
  create: AcademyCreateWithoutSchoolsInput!
  update: AcademyUpdateWithoutSchoolsDataInput!
}

input AcademyWhereInput {
  AND: [AcademyWhereInput!]
  id: StringFilter
  imageName: StringFilter
  name: StringFilter
  NOT: [AcademyWhereInput!]
  OR: [AcademyWhereInput!]
  schools: SchoolFilter
}

input AcademyWhereUniqueInput {
  id: ID
  imageName: String
}

type AuthPayload {
  teacher: Teacher!
  token: String!
}

type Classroom {
  academicLevel: String!
  id: ID!
  name: String!
  schoolYear: SchoolYear!
  studentYears(after: ID, before: ID, first: Int, last: Int, skip: Int): [StudentYear!]!
  teachers(after: ID, before: ID, first: Int, last: Int, skip: Int): [Teacher!]!
}

input ClassroomCreateInput {
  academicLevel: String!
  id: ID
  name: String!
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  studentYears: StudentYearCreateManyWithoutStudentYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
}

input ClassroomCreateManyWithoutClassroomsInput {
  connect: [ClassroomWhereUniqueInput!]
  create: [ClassroomCreateWithoutSchoolYearInput!]
}

input ClassroomCreateOneWithoutClassroomInput {
  connect: ClassroomWhereUniqueInput
  create: ClassroomCreateWithoutStudentYearsInput
}

input ClassroomCreateWithoutSchoolYearInput {
  academicLevel: String!
  id: ID
  name: String!
  studentYears: StudentYearCreateManyWithoutStudentYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
}

input ClassroomCreateWithoutStudentYearsInput {
  academicLevel: String!
  id: ID
  name: String!
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  teachers: TeacherCreateManyWithoutTeachersInput
}

input ClassroomCreateWithoutTeachersInput {
  academicLevel: String!
  id: ID
  name: String!
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  studentYears: StudentYearCreateManyWithoutStudentYearsInput
}

input ClassroomFilter {
  every: ClassroomWhereInput
  none: ClassroomWhereInput
  some: ClassroomWhereInput
}

input ClassroomScalarWhereInput {
  academicLevel: StringFilter
  AND: [ClassroomScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [ClassroomScalarWhereInput!]
  OR: [ClassroomScalarWhereInput!]
  studentYears: StudentYearFilter
  teachers: TeacherFilter
}

input ClassroomUpdateInput {
  academicLevel: String
  name: String
  teachers: [TeacherWhereUniqueInput!]
}

input ClassroomUpdateManyDataInput {
  academicLevel: String
  id: ID
  name: String
}

input ClassroomUpdateManyWithoutSchoolYearInput {
  connect: [ClassroomWhereUniqueInput!]
  create: [ClassroomCreateWithoutSchoolYearInput!]
  delete: [ClassroomWhereUniqueInput!]
  deleteMany: [ClassroomScalarWhereInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  set: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutSchoolYearInput!]
  updateMany: [ClassroomUpdateManyWithWhereNestedInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutSchoolYearInput!]
}

input ClassroomUpdateManyWithoutTeachersInput {
  connect: [ClassroomWhereUniqueInput!]
  create: [ClassroomCreateWithoutTeachersInput!]
  delete: [ClassroomWhereUniqueInput!]
  deleteMany: [ClassroomScalarWhereInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  set: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutTeachersInput!]
  updateMany: [ClassroomUpdateManyWithWhereNestedInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutTeachersInput!]
}

input ClassroomUpdateManyWithWhereNestedInput {
  data: ClassroomUpdateManyDataInput!
  where: ClassroomScalarWhereInput!
}

input ClassroomUpdateOneWithoutStudentYearsInput {
  connect: ClassroomWhereUniqueInput
  create: ClassroomCreateWithoutStudentYearsInput
  delete: Boolean
  disconnect: Boolean
  update: ClassroomUpdateWithoutStudentYearsDataInput
  upsert: ClassroomUpsertWithoutStudentYearsInput
}

input ClassroomUpdateWithoutSchoolYearDataInput {
  academicLevel: String
  id: ID
  name: String
  studentYears: StudentYearUpdateManyWithoutClassroomInput
  teachers: TeacherUpdateManyWithoutClassroomsInput
}

input ClassroomUpdateWithoutStudentYearsDataInput {
  academicLevel: String
  id: ID
  name: String
  schoolYear: SchoolYearUpdateOneRequiredWithoutClassroomsInput
  teachers: TeacherUpdateManyWithoutClassroomsInput
}

input ClassroomUpdateWithoutTeachersDataInput {
  academicLevel: String
  id: ID
  name: String
  schoolYear: SchoolYearUpdateOneRequiredWithoutClassroomsInput
  studentYears: StudentYearUpdateManyWithoutClassroomInput
}

input ClassroomUpdateWithWhereUniqueWithoutSchoolYearInput {
  data: ClassroomUpdateWithoutSchoolYearDataInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomUpdateWithWhereUniqueWithoutTeachersInput {
  data: ClassroomUpdateWithoutTeachersDataInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomUpsertWithoutStudentYearsInput {
  create: ClassroomCreateWithoutStudentYearsInput!
  update: ClassroomUpdateWithoutStudentYearsDataInput!
}

input ClassroomUpsertWithWhereUniqueWithoutSchoolYearInput {
  create: ClassroomCreateWithoutSchoolYearInput!
  update: ClassroomUpdateWithoutSchoolYearDataInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomUpsertWithWhereUniqueWithoutTeachersInput {
  create: ClassroomCreateWithoutTeachersInput!
  update: ClassroomUpdateWithoutTeachersDataInput!
  where: ClassroomWhereUniqueInput!
}

input ClassroomWhereInput {
  academicLevel: StringFilter
  AND: [ClassroomWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [ClassroomWhereInput!]
  OR: [ClassroomWhereInput!]
  schoolYear: SchoolYearWhereInput
  studentYears: StudentYearFilter
  teachers: TeacherFilter
}

input ClassroomWhereUniqueInput {
  id: ID
}

input CreateOneStudentInput {
  birthDate: DateTime!
  firstName: String!
  gender: String!
  lastName: String!
  schoolYear: SchoolYearWhereUniqueInput
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Mutation {
  createOneAcademy(data: AcademyCreateInput!): Academy!
  createOneClassroom(data: ClassroomCreateInput!): Classroom!
  createOnePpre(data: PpreCreateInput!): Ppre!
  createOnePpreCheckup(data: PpreCheckupCreateInput!): PpreCheckup!
  createOneSchool(data: SchoolCreateInput!): School!
  createOneSchoolYear: SchoolYear
  createOneSkill(data: SkillCreateInput!): Skill!
  createOneStudent(data: CreateOneStudentInput!): Student
  createOneTeacher(data: TeacherCreateInput!): Teacher
  deleteOneClassroom(where: ClassroomWhereUniqueInput!): Classroom
  deleteOneSkill(where: SkillWhereUniqueInput!): Skill
  deleteOneTeacher(where: TeacherWhereUniqueInput!): Teacher
  login(password: String, teacher: TeacherWhereUniqueInput!): AuthPayload!
  updateOneClassroom(data: ClassroomUpdateInput!, where: ClassroomWhereUniqueInput!): Classroom
  updateOnePpre(data: PpreUpdateInput!, where: PpreWhereUniqueInput!): Ppre
  updateOneSkill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill
  updateOneStudentYear(data: StudentYearUpdateInput!, where: StudentYearWhereUniqueInput!): StudentYear
  updateOneTeacher(data: TeacherUpdateInput, where: TeacherWhereUniqueInput!): Teacher!
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Ppre {
  checkups(after: ID, before: ID, first: Int, last: Int, skip: Int): [PpreCheckup!]!
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: [String!]!
  globalAssessment: String
  id: ID!
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: [String!]!
  skillsConcerned(after: ID, before: ID, first: Int, last: Int, skip: Int): [Skill!]!
  skillsToWork(after: ID, before: ID, first: Int, last: Int, skip: Int): [Skill!]!
  studentYear: StudentYear!
}

type PpreCheckup {
  assessment: String!
  id: ID!
  ppre: Ppre!
  skillsWorked(after: ID, before: ID, first: Int, last: Int, skip: Int): [Skill!]!
}

input PpreCheckupCreateInput {
  assessment: String!
  id: ID
  ppre: PpreCreateOneWithoutPpreInput!
  skillsWorked: SkillCreateManyWithoutSkillsWorkedInput
}

input PpreCheckupCreateManyWithoutCheckupsInput {
  connect: [PpreCheckupWhereUniqueInput!]
  create: [PpreCheckupCreateWithoutPpreInput!]
}

input PpreCheckupCreateOneWithoutPpreCheckupInput {
  connect: PpreCheckupWhereUniqueInput
  create: PpreCheckupCreateWithoutSkillsWorkedInput
}

input PpreCheckupCreateWithoutPpreInput {
  assessment: String!
  id: ID
  skillsWorked: SkillCreateManyWithoutSkillsWorkedInput
}

input PpreCheckupCreateWithoutSkillsWorkedInput {
  assessment: String!
  id: ID
  ppre: PpreCreateOneWithoutPpreInput!
}

input PpreCheckupFilter {
  every: PpreCheckupWhereInput
  none: PpreCheckupWhereInput
  some: PpreCheckupWhereInput
}

input PpreCheckupScalarWhereInput {
  AND: [PpreCheckupScalarWhereInput!]
  assessment: StringFilter
  id: StringFilter
  NOT: [PpreCheckupScalarWhereInput!]
  OR: [PpreCheckupScalarWhereInput!]
  skillsWorked: SkillFilter
}

input PpreCheckupUpdateManyDataInput {
  assessment: String
  id: ID
}

input PpreCheckupUpdateManyWithoutPpreInput {
  connect: [PpreCheckupWhereUniqueInput!]
  create: [PpreCheckupCreateWithoutPpreInput!]
  delete: [PpreCheckupWhereUniqueInput!]
  deleteMany: [PpreCheckupScalarWhereInput!]
  disconnect: [PpreCheckupWhereUniqueInput!]
  set: [PpreCheckupWhereUniqueInput!]
  update: [PpreCheckupUpdateWithWhereUniqueWithoutPpreInput!]
  updateMany: [PpreCheckupUpdateManyWithWhereNestedInput!]
  upsert: [PpreCheckupUpsertWithWhereUniqueWithoutPpreInput!]
}

input PpreCheckupUpdateManyWithWhereNestedInput {
  data: PpreCheckupUpdateManyDataInput!
  where: PpreCheckupScalarWhereInput!
}

input PpreCheckupUpdateOneWithoutSkillsWorkedInput {
  connect: PpreCheckupWhereUniqueInput
  create: PpreCheckupCreateWithoutSkillsWorkedInput
  delete: Boolean
  disconnect: Boolean
  update: PpreCheckupUpdateWithoutSkillsWorkedDataInput
  upsert: PpreCheckupUpsertWithoutSkillsWorkedInput
}

input PpreCheckupUpdateWithoutPpreDataInput {
  assessment: String
  id: ID
  skillsWorked: SkillUpdateManyWithoutPpreCheckupInput
}

input PpreCheckupUpdateWithoutSkillsWorkedDataInput {
  assessment: String
  id: ID
  ppre: PpreUpdateOneRequiredWithoutCheckupsInput
}

input PpreCheckupUpdateWithWhereUniqueWithoutPpreInput {
  data: PpreCheckupUpdateWithoutPpreDataInput!
  where: PpreCheckupWhereUniqueInput!
}

input PpreCheckupUpsertWithoutSkillsWorkedInput {
  create: PpreCheckupCreateWithoutSkillsWorkedInput!
  update: PpreCheckupUpdateWithoutSkillsWorkedDataInput!
}

input PpreCheckupUpsertWithWhereUniqueWithoutPpreInput {
  create: PpreCheckupCreateWithoutPpreInput!
  update: PpreCheckupUpdateWithoutPpreDataInput!
  where: PpreCheckupWhereUniqueInput!
}

input PpreCheckupWhereInput {
  AND: [PpreCheckupWhereInput!]
  assessment: StringFilter
  id: StringFilter
  NOT: [PpreCheckupWhereInput!]
  OR: [PpreCheckupWhereInput!]
  ppre: PpreWhereInput
  skillsWorked: SkillFilter
}

input PpreCheckupWhereUniqueInput {
  id: ID
}

input PpreCreateexternalSupportInput {
  set: [String!]
}

input PpreCreateInput {
  checkups: PpreCheckupCreateManyWithoutCheckupsInput
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreCreateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreCreateschoolingArrangementsInput
  skillsConcerned: SkillCreateManyWithoutSkillsConcernedInput
  skillsToWork: SkillCreateManyWithoutSkillsToWorkInput
  studentYear: StudentYearCreateOneWithoutStudentYearInput!
}

input PpreCreateManyWithoutSkillsConcernedPpresInput {
  connect: [PpreWhereUniqueInput!]
  create: [PpreCreateWithoutSkillsConcernedInput!]
}

input PpreCreateManyWithoutSkillsToWorkPpresInput {
  connect: [PpreWhereUniqueInput!]
  create: [PpreCreateWithoutSkillsToWorkInput!]
}

input PpreCreateOneWithoutPpreInput {
  connect: PpreWhereUniqueInput
  create: PpreCreateWithoutCheckupsInput
}

input PpreCreateschoolingArrangementsInput {
  set: [String!]
}

input PpreCreateWithoutCheckupsInput {
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreCreateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreCreateschoolingArrangementsInput
  skillsConcerned: SkillCreateManyWithoutSkillsConcernedInput
  skillsToWork: SkillCreateManyWithoutSkillsToWorkInput
  studentYear: StudentYearCreateOneWithoutStudentYearInput!
}

input PpreCreateWithoutSkillsConcernedInput {
  checkups: PpreCheckupCreateManyWithoutCheckupsInput
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreCreateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreCreateschoolingArrangementsInput
  skillsToWork: SkillCreateManyWithoutSkillsToWorkInput
  studentYear: StudentYearCreateOneWithoutStudentYearInput!
}

input PpreCreateWithoutSkillsToWorkInput {
  checkups: PpreCheckupCreateManyWithoutCheckupsInput
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreCreateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreCreateschoolingArrangementsInput
  skillsConcerned: SkillCreateManyWithoutSkillsConcernedInput
  studentYear: StudentYearCreateOneWithoutStudentYearInput!
}

input PpreCreateWithoutStudentYearInput {
  checkups: PpreCheckupCreateManyWithoutCheckupsInput
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreCreateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreCreateschoolingArrangementsInput
  skillsConcerned: SkillCreateManyWithoutSkillsConcernedInput
  skillsToWork: SkillCreateManyWithoutSkillsToWorkInput
}

input PpreFilter {
  every: PpreWhereInput
  none: PpreWhereInput
  some: PpreWhereInput
}

input PpreScalarWhereInput {
  AND: [PpreScalarWhereInput!]
  checkups: PpreCheckupFilter
  councilRenewalOpinion: NullableStringFilter
  councilRenewalOpinionDate: NullableDateTimeFilter
  globalAssessment: NullableStringFilter
  id: StringFilter
  nativeLanguage: NullableStringFilter
  nature: NullableStringFilter
  NOT: [PpreScalarWhereInput!]
  OR: [PpreScalarWhereInput!]
  orientationProposalOrganization: NullableStringFilter
  orientationProposalResult: NullableBooleanFilter
  renewal: NullableBooleanFilter
  retentionProposalAcademicLevel: NullableStringFilter
  retentionProposalResult: NullableBooleanFilter
  schoolAttendance: NullableStringFilter
  skillsConcerned: SkillFilter
  skillsToWork: SkillFilter
}

input PpreUpdateexternalSupportInput {
  set: [String!]
}

input PpreUpdateInput {
  checkups: PpreCheckupUpdateManyWithoutPpreInput
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreUpdateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreUpdateschoolingArrangementsInput
  skillsConcerned: SkillUpdateManyWithoutSkillsConcernedPpresInput
  skillsToWork: SkillUpdateManyWithoutSkillsToWorkPpresInput
  studentYear: StudentYearUpdateOneRequiredWithoutPpreInput
}

input PpreUpdateManyDataInput {
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreUpdateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreUpdateschoolingArrangementsInput
}

input PpreUpdateManyWithoutSkillsConcernedInput {
  connect: [PpreWhereUniqueInput!]
  create: [PpreCreateWithoutSkillsConcernedInput!]
  delete: [PpreWhereUniqueInput!]
  deleteMany: [PpreScalarWhereInput!]
  disconnect: [PpreWhereUniqueInput!]
  set: [PpreWhereUniqueInput!]
  update: [PpreUpdateWithWhereUniqueWithoutSkillsConcernedInput!]
  updateMany: [PpreUpdateManyWithWhereNestedInput!]
  upsert: [PpreUpsertWithWhereUniqueWithoutSkillsConcernedInput!]
}

input PpreUpdateManyWithoutSkillsToWorkInput {
  connect: [PpreWhereUniqueInput!]
  create: [PpreCreateWithoutSkillsToWorkInput!]
  delete: [PpreWhereUniqueInput!]
  deleteMany: [PpreScalarWhereInput!]
  disconnect: [PpreWhereUniqueInput!]
  set: [PpreWhereUniqueInput!]
  update: [PpreUpdateWithWhereUniqueWithoutSkillsToWorkInput!]
  updateMany: [PpreUpdateManyWithWhereNestedInput!]
  upsert: [PpreUpsertWithWhereUniqueWithoutSkillsToWorkInput!]
}

input PpreUpdateManyWithWhereNestedInput {
  data: PpreUpdateManyDataInput!
  where: PpreScalarWhereInput!
}

input PpreUpdateOneRequiredWithoutCheckupsInput {
  connect: PpreWhereUniqueInput
  create: PpreCreateWithoutCheckupsInput
  update: PpreUpdateWithoutCheckupsDataInput
  upsert: PpreUpsertWithoutCheckupsInput
}

input PpreUpdateOneWithoutStudentYearInput {
  connect: PpreWhereUniqueInput
  create: PpreCreateWithoutStudentYearInput
  delete: Boolean
  disconnect: Boolean
  update: PpreUpdateWithoutStudentYearDataInput
  upsert: PpreUpsertWithoutStudentYearInput
}

input PpreUpdateschoolingArrangementsInput {
  set: [String!]
}

input PpreUpdateWithoutCheckupsDataInput {
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreUpdateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreUpdateschoolingArrangementsInput
  skillsConcerned: SkillUpdateManyWithoutSkillsConcernedPpresInput
  skillsToWork: SkillUpdateManyWithoutSkillsToWorkPpresInput
  studentYear: StudentYearUpdateOneRequiredWithoutPpreInput
}

input PpreUpdateWithoutSkillsConcernedDataInput {
  checkups: PpreCheckupUpdateManyWithoutPpreInput
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreUpdateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreUpdateschoolingArrangementsInput
  skillsToWork: SkillUpdateManyWithoutSkillsToWorkPpresInput
  studentYear: StudentYearUpdateOneRequiredWithoutPpreInput
}

input PpreUpdateWithoutSkillsToWorkDataInput {
  checkups: PpreCheckupUpdateManyWithoutPpreInput
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreUpdateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreUpdateschoolingArrangementsInput
  skillsConcerned: SkillUpdateManyWithoutSkillsConcernedPpresInput
  studentYear: StudentYearUpdateOneRequiredWithoutPpreInput
}

input PpreUpdateWithoutStudentYearDataInput {
  checkups: PpreCheckupUpdateManyWithoutPpreInput
  councilRenewalOpinion: String
  councilRenewalOpinionDate: DateTime
  externalSupport: PpreUpdateexternalSupportInput
  globalAssessment: String
  id: ID
  nativeLanguage: String
  nature: String
  orientationProposalOrganization: String
  orientationProposalResult: Boolean
  renewal: Boolean
  retentionProposalAcademicLevel: String
  retentionProposalResult: Boolean
  schoolAttendance: String
  schoolingArrangements: PpreUpdateschoolingArrangementsInput
  skillsConcerned: SkillUpdateManyWithoutSkillsConcernedPpresInput
  skillsToWork: SkillUpdateManyWithoutSkillsToWorkPpresInput
}

input PpreUpdateWithWhereUniqueWithoutSkillsConcernedInput {
  data: PpreUpdateWithoutSkillsConcernedDataInput!
  where: PpreWhereUniqueInput!
}

input PpreUpdateWithWhereUniqueWithoutSkillsToWorkInput {
  data: PpreUpdateWithoutSkillsToWorkDataInput!
  where: PpreWhereUniqueInput!
}

input PpreUpsertWithoutCheckupsInput {
  create: PpreCreateWithoutCheckupsInput!
  update: PpreUpdateWithoutCheckupsDataInput!
}

input PpreUpsertWithoutStudentYearInput {
  create: PpreCreateWithoutStudentYearInput!
  update: PpreUpdateWithoutStudentYearDataInput!
}

input PpreUpsertWithWhereUniqueWithoutSkillsConcernedInput {
  create: PpreCreateWithoutSkillsConcernedInput!
  update: PpreUpdateWithoutSkillsConcernedDataInput!
  where: PpreWhereUniqueInput!
}

input PpreUpsertWithWhereUniqueWithoutSkillsToWorkInput {
  create: PpreCreateWithoutSkillsToWorkInput!
  update: PpreUpdateWithoutSkillsToWorkDataInput!
  where: PpreWhereUniqueInput!
}

input PpreWhereInput {
  AND: [PpreWhereInput!]
  checkups: PpreCheckupFilter
  councilRenewalOpinion: NullableStringFilter
  councilRenewalOpinionDate: NullableDateTimeFilter
  globalAssessment: NullableStringFilter
  id: StringFilter
  nativeLanguage: NullableStringFilter
  nature: NullableStringFilter
  NOT: [PpreWhereInput!]
  OR: [PpreWhereInput!]
  orientationProposalOrganization: NullableStringFilter
  orientationProposalResult: NullableBooleanFilter
  renewal: NullableBooleanFilter
  retentionProposalAcademicLevel: NullableStringFilter
  retentionProposalResult: NullableBooleanFilter
  schoolAttendance: NullableStringFilter
  skillsConcerned: SkillFilter
  skillsToWork: SkillFilter
  studentYear: StudentYearWhereInput
}

input PpreWhereUniqueInput {
  id: ID
}

type Query {
  academy(where: AcademyWhereUniqueInput!): Academy
  myClassroomsThisYear: [Classroom!]!
  mySchoolYear: SchoolYear
  mySchoolYears: [SchoolYear!]
  school(where: SchoolWhereUniqueInput!): School
  schools(after: ID, before: ID, first: Int, last: Int, skip: Int): [School!]!
  skill(where: SkillWhereUniqueInput!): Skill
  student(where: StudentWhereUniqueInput!): Student
  students(after: ID, before: ID, first: Int, last: Int, skip: Int): [Student!]!
  studentYear(where: StudentYearWhereUniqueInput!): StudentYear
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachers(after: ID, before: ID, first: Int, last: Int, skip: Int): [Teacher!]!
}

type School {
  academy: Academy!
  city: String!
  collegeSector: String!
  createdAt: DateTime!
  district: String!
  id: ID!
  name: String!
  phone: String!
  schoolYears(after: ID, before: ID, first: Int, last: Int, skip: Int): [SchoolYear!]!
  teachers(after: ID, before: ID, first: Int, last: Int, skip: Int): [Teacher!]!
  webstite: String
}

input SchoolCreateInput {
  academy: AcademyCreateOneWithoutAcademyInput!
  city: String!
  collegeSector: String!
  createdAt: DateTime
  district: String!
  id: ID
  name: String!
  phone: String!
  schoolYears: SchoolYearCreateManyWithoutSchoolYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
  webstite: String
}

input SchoolCreateManyWithoutSchoolsInput {
  connect: [SchoolWhereUniqueInput!]
  create: [SchoolCreateWithoutAcademyInput!]
}

input SchoolCreateOneWithoutSchoolInput {
  connect: SchoolWhereUniqueInput
  create: SchoolCreateWithoutTeachersInput
}

input SchoolCreateWithoutAcademyInput {
  city: String!
  collegeSector: String!
  createdAt: DateTime
  district: String!
  id: ID
  name: String!
  phone: String!
  schoolYears: SchoolYearCreateManyWithoutSchoolYearsInput
  teachers: TeacherCreateManyWithoutTeachersInput
  webstite: String
}

input SchoolCreateWithoutSchoolYearsInput {
  academy: AcademyCreateOneWithoutAcademyInput!
  city: String!
  collegeSector: String!
  createdAt: DateTime
  district: String!
  id: ID
  name: String!
  phone: String!
  teachers: TeacherCreateManyWithoutTeachersInput
  webstite: String
}

input SchoolCreateWithoutTeachersInput {
  academy: AcademyCreateOneWithoutAcademyInput!
  city: String!
  collegeSector: String!
  createdAt: DateTime
  district: String!
  id: ID
  name: String!
  phone: String!
  schoolYears: SchoolYearCreateManyWithoutSchoolYearsInput
  webstite: String
}

input SchoolFilter {
  every: SchoolWhereInput
  none: SchoolWhereInput
  some: SchoolWhereInput
}

input SchoolUpdateOneRequiredWithoutSchoolYearsInput {
  connect: SchoolWhereUniqueInput
  create: SchoolCreateWithoutSchoolYearsInput
  update: SchoolUpdateWithoutSchoolYearsDataInput
  upsert: SchoolUpsertWithoutSchoolYearsInput
}

input SchoolUpdateOneRequiredWithoutTeachersInput {
  connect: SchoolWhereUniqueInput
  create: SchoolCreateWithoutTeachersInput
  update: SchoolUpdateWithoutTeachersDataInput
  upsert: SchoolUpsertWithoutTeachersInput
}

input SchoolUpdateWithoutSchoolYearsDataInput {
  academy: AcademyUpdateOneRequiredWithoutSchoolsInput
  city: String
  collegeSector: String
  createdAt: DateTime
  district: String
  id: ID
  name: String
  phone: String
  teachers: TeacherUpdateManyWithoutSchoolInput
  webstite: String
}

input SchoolUpdateWithoutTeachersDataInput {
  academy: AcademyUpdateOneRequiredWithoutSchoolsInput
  city: String
  collegeSector: String
  createdAt: DateTime
  district: String
  id: ID
  name: String
  phone: String
  schoolYears: SchoolYearUpdateManyWithoutSchoolInput
  webstite: String
}

input SchoolUpsertWithoutSchoolYearsInput {
  create: SchoolCreateWithoutSchoolYearsInput!
  update: SchoolUpdateWithoutSchoolYearsDataInput!
}

input SchoolUpsertWithoutTeachersInput {
  create: SchoolCreateWithoutTeachersInput!
  update: SchoolUpdateWithoutTeachersDataInput!
}

input SchoolWhereInput {
  academy: AcademyWhereInput
  AND: [SchoolWhereInput!]
  city: StringFilter
  collegeSector: StringFilter
  createdAt: DateTimeFilter
  district: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  phone: StringFilter
  schoolYears: SchoolYearFilter
  teachers: TeacherFilter
  webstite: NullableStringFilter
}

input SchoolWhereUniqueInput {
  id: ID
}

type SchoolYear {
  classrooms(after: ID, before: ID, first: Int, last: Int, skip: Int): [Classroom!]!
  from: DateTime!
  id: ID!
  school: School!
  skills(after: ID, before: ID, first: Int, last: Int, skip: Int): [Skill!]!
  studentYears(after: ID, before: ID, first: Int, last: Int, skip: Int): [StudentYear!]!
  to: DateTime!
}

input SchoolYearCreateManyWithoutSchoolYearsInput {
  connect: [SchoolYearWhereUniqueInput!]
  create: [SchoolYearCreateWithoutSchoolInput!]
}

input SchoolYearCreateOneWithoutSchoolYearInput {
  connect: SchoolYearWhereUniqueInput
  create: SchoolYearCreateWithoutClassroomsInput
}

input SchoolYearCreateWithoutClassroomsInput {
  from: DateTime!
  id: ID
  school: SchoolCreateOneWithoutSchoolInput!
  skills: SkillCreateManyWithoutSkillsInput
  studentYears: StudentYearCreateManyWithoutStudentYearsInput
  to: DateTime!
}

input SchoolYearCreateWithoutSchoolInput {
  classrooms: ClassroomCreateManyWithoutClassroomsInput
  from: DateTime!
  id: ID
  skills: SkillCreateManyWithoutSkillsInput
  studentYears: StudentYearCreateManyWithoutStudentYearsInput
  to: DateTime!
}

input SchoolYearCreateWithoutSkillsInput {
  classrooms: ClassroomCreateManyWithoutClassroomsInput
  from: DateTime!
  id: ID
  school: SchoolCreateOneWithoutSchoolInput!
  studentYears: StudentYearCreateManyWithoutStudentYearsInput
  to: DateTime!
}

input SchoolYearCreateWithoutStudentYearsInput {
  classrooms: ClassroomCreateManyWithoutClassroomsInput
  from: DateTime!
  id: ID
  school: SchoolCreateOneWithoutSchoolInput!
  skills: SkillCreateManyWithoutSkillsInput
  to: DateTime!
}

input SchoolYearFilter {
  every: SchoolYearWhereInput
  none: SchoolYearWhereInput
  some: SchoolYearWhereInput
}

input SchoolYearScalarWhereInput {
  AND: [SchoolYearScalarWhereInput!]
  classrooms: ClassroomFilter
  from: DateTimeFilter
  id: StringFilter
  NOT: [SchoolYearScalarWhereInput!]
  OR: [SchoolYearScalarWhereInput!]
  skills: SkillFilter
  studentYears: StudentYearFilter
  to: DateTimeFilter
}

input SchoolYearUpdateManyDataInput {
  from: DateTime
  id: ID
  to: DateTime
}

input SchoolYearUpdateManyWithoutSchoolInput {
  connect: [SchoolYearWhereUniqueInput!]
  create: [SchoolYearCreateWithoutSchoolInput!]
  delete: [SchoolYearWhereUniqueInput!]
  deleteMany: [SchoolYearScalarWhereInput!]
  disconnect: [SchoolYearWhereUniqueInput!]
  set: [SchoolYearWhereUniqueInput!]
  update: [SchoolYearUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [SchoolYearUpdateManyWithWhereNestedInput!]
  upsert: [SchoolYearUpsertWithWhereUniqueWithoutSchoolInput!]
}

input SchoolYearUpdateManyWithWhereNestedInput {
  data: SchoolYearUpdateManyDataInput!
  where: SchoolYearScalarWhereInput!
}

input SchoolYearUpdateOneRequiredWithoutClassroomsInput {
  connect: SchoolYearWhereUniqueInput
  create: SchoolYearCreateWithoutClassroomsInput
  update: SchoolYearUpdateWithoutClassroomsDataInput
  upsert: SchoolYearUpsertWithoutClassroomsInput
}

input SchoolYearUpdateOneRequiredWithoutSkillsInput {
  connect: SchoolYearWhereUniqueInput
  create: SchoolYearCreateWithoutSkillsInput
  update: SchoolYearUpdateWithoutSkillsDataInput
  upsert: SchoolYearUpsertWithoutSkillsInput
}

input SchoolYearUpdateOneRequiredWithoutStudentYearsInput {
  connect: SchoolYearWhereUniqueInput
  create: SchoolYearCreateWithoutStudentYearsInput
  update: SchoolYearUpdateWithoutStudentYearsDataInput
  upsert: SchoolYearUpsertWithoutStudentYearsInput
}

input SchoolYearUpdateWithoutClassroomsDataInput {
  from: DateTime
  id: ID
  school: SchoolUpdateOneRequiredWithoutSchoolYearsInput
  skills: SkillUpdateManyWithoutSchoolYearInput
  studentYears: StudentYearUpdateManyWithoutSchoolYearInput
  to: DateTime
}

input SchoolYearUpdateWithoutSchoolDataInput {
  classrooms: ClassroomUpdateManyWithoutSchoolYearInput
  from: DateTime
  id: ID
  skills: SkillUpdateManyWithoutSchoolYearInput
  studentYears: StudentYearUpdateManyWithoutSchoolYearInput
  to: DateTime
}

input SchoolYearUpdateWithoutSkillsDataInput {
  classrooms: ClassroomUpdateManyWithoutSchoolYearInput
  from: DateTime
  id: ID
  school: SchoolUpdateOneRequiredWithoutSchoolYearsInput
  studentYears: StudentYearUpdateManyWithoutSchoolYearInput
  to: DateTime
}

input SchoolYearUpdateWithoutStudentYearsDataInput {
  classrooms: ClassroomUpdateManyWithoutSchoolYearInput
  from: DateTime
  id: ID
  school: SchoolUpdateOneRequiredWithoutSchoolYearsInput
  skills: SkillUpdateManyWithoutSchoolYearInput
  to: DateTime
}

input SchoolYearUpdateWithWhereUniqueWithoutSchoolInput {
  data: SchoolYearUpdateWithoutSchoolDataInput!
  where: SchoolYearWhereUniqueInput!
}

input SchoolYearUpsertWithoutClassroomsInput {
  create: SchoolYearCreateWithoutClassroomsInput!
  update: SchoolYearUpdateWithoutClassroomsDataInput!
}

input SchoolYearUpsertWithoutSkillsInput {
  create: SchoolYearCreateWithoutSkillsInput!
  update: SchoolYearUpdateWithoutSkillsDataInput!
}

input SchoolYearUpsertWithoutStudentYearsInput {
  create: SchoolYearCreateWithoutStudentYearsInput!
  update: SchoolYearUpdateWithoutStudentYearsDataInput!
}

input SchoolYearUpsertWithWhereUniqueWithoutSchoolInput {
  create: SchoolYearCreateWithoutSchoolInput!
  update: SchoolYearUpdateWithoutSchoolDataInput!
  where: SchoolYearWhereUniqueInput!
}

input SchoolYearWhereInput {
  AND: [SchoolYearWhereInput!]
  classrooms: ClassroomFilter
  from: DateTimeFilter
  id: StringFilter
  NOT: [SchoolYearWhereInput!]
  OR: [SchoolYearWhereInput!]
  school: SchoolWhereInput
  skills: SkillFilter
  studentYears: StudentYearFilter
  to: DateTimeFilter
}

input SchoolYearWhereUniqueInput {
  id: ID
}

type Skill {
  children(after: ID, before: ID, first: Int, last: Int, skip: Int): [Skill!]!
  id: ID!
  name: String!
  parent: Skill
  ppreCheckup: PpreCheckup
  schoolYear: SchoolYear!
  skillsConcernedPpres(after: ID, before: ID, first: Int, last: Int, skip: Int): [Ppre!]!
  skillsToWorkPpres(after: ID, before: ID, first: Int, last: Int, skip: Int): [Ppre!]!
}

input SkillCreateInput {
  children: SkillCreateManyWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  ppreCheckup: PpreCheckupCreateOneWithoutPpreCheckupInput
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  skillsConcernedPpres: PpreCreateManyWithoutSkillsConcernedPpresInput
  skillsToWorkPpres: PpreCreateManyWithoutSkillsToWorkPpresInput
}

input SkillCreateManyWithoutChildrenInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutParentInput!]
}

input SkillCreateManyWithoutSkillsConcernedInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSkillsConcernedPpresInput!]
}

input SkillCreateManyWithoutSkillsInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSchoolYearInput!]
}

input SkillCreateManyWithoutSkillsToWorkInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSkillsToWorkPpresInput!]
}

input SkillCreateManyWithoutSkillsWorkedInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutPpreCheckupInput!]
}

input SkillCreateOneWithoutParentInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutChildrenInput
}

input SkillCreateWithoutChildrenInput {
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  ppreCheckup: PpreCheckupCreateOneWithoutPpreCheckupInput
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  skillsConcernedPpres: PpreCreateManyWithoutSkillsConcernedPpresInput
  skillsToWorkPpres: PpreCreateManyWithoutSkillsToWorkPpresInput
}

input SkillCreateWithoutParentInput {
  children: SkillCreateManyWithoutChildrenInput
  id: ID
  name: String!
  ppreCheckup: PpreCheckupCreateOneWithoutPpreCheckupInput
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  skillsConcernedPpres: PpreCreateManyWithoutSkillsConcernedPpresInput
  skillsToWorkPpres: PpreCreateManyWithoutSkillsToWorkPpresInput
}

input SkillCreateWithoutPpreCheckupInput {
  children: SkillCreateManyWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  skillsConcernedPpres: PpreCreateManyWithoutSkillsConcernedPpresInput
  skillsToWorkPpres: PpreCreateManyWithoutSkillsToWorkPpresInput
}

input SkillCreateWithoutSchoolYearInput {
  children: SkillCreateManyWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  ppreCheckup: PpreCheckupCreateOneWithoutPpreCheckupInput
  skillsConcernedPpres: PpreCreateManyWithoutSkillsConcernedPpresInput
  skillsToWorkPpres: PpreCreateManyWithoutSkillsToWorkPpresInput
}

input SkillCreateWithoutSkillsConcernedPpresInput {
  children: SkillCreateManyWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  ppreCheckup: PpreCheckupCreateOneWithoutPpreCheckupInput
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  skillsToWorkPpres: PpreCreateManyWithoutSkillsToWorkPpresInput
}

input SkillCreateWithoutSkillsToWorkPpresInput {
  children: SkillCreateManyWithoutChildrenInput
  id: ID
  name: String!
  parent: SkillCreateOneWithoutParentInput
  ppreCheckup: PpreCheckupCreateOneWithoutPpreCheckupInput
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  skillsConcernedPpres: PpreCreateManyWithoutSkillsConcernedPpresInput
}

input SkillFilter {
  every: SkillWhereInput
  none: SkillWhereInput
  some: SkillWhereInput
}

input SkillScalarWhereInput {
  AND: [SkillScalarWhereInput!]
  children: SkillFilter
  id: StringFilter
  name: StringFilter
  NOT: [SkillScalarWhereInput!]
  OR: [SkillScalarWhereInput!]
  skillsConcernedPpres: PpreFilter
  skillsToWorkPpres: PpreFilter
}

input SkillUpdateInput {
  children: SkillUpdateManyWithoutParentInput
  id: ID
  name: String
  parent: SkillUpdateOneWithoutChildrenInput
  ppreCheckup: PpreCheckupUpdateOneWithoutSkillsWorkedInput
  schoolYear: SchoolYearUpdateOneRequiredWithoutSkillsInput
  skillsConcernedPpres: PpreUpdateManyWithoutSkillsConcernedInput
  skillsToWorkPpres: PpreUpdateManyWithoutSkillsToWorkInput
}

input SkillUpdateManyDataInput {
  id: ID
  name: String
}

input SkillUpdateManyWithoutParentInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutParentInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutParentInput!]
}

input SkillUpdateManyWithoutPpreCheckupInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutPpreCheckupInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutPpreCheckupInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutPpreCheckupInput!]
}

input SkillUpdateManyWithoutSchoolYearInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSchoolYearInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutSchoolYearInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutSchoolYearInput!]
}

input SkillUpdateManyWithoutSkillsConcernedPpresInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSkillsConcernedPpresInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutSkillsConcernedPpresInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutSkillsConcernedPpresInput!]
}

input SkillUpdateManyWithoutSkillsToWorkPpresInput {
  connect: [SkillWhereUniqueInput!]
  create: [SkillCreateWithoutSkillsToWorkPpresInput!]
  delete: [SkillWhereUniqueInput!]
  deleteMany: [SkillScalarWhereInput!]
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutSkillsToWorkPpresInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutSkillsToWorkPpresInput!]
}

input SkillUpdateManyWithWhereNestedInput {
  data: SkillUpdateManyDataInput!
  where: SkillScalarWhereInput!
}

input SkillUpdateOneWithoutChildrenInput {
  connect: SkillWhereUniqueInput
  create: SkillCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: SkillUpdateWithoutChildrenDataInput
  upsert: SkillUpsertWithoutChildrenInput
}

input SkillUpdateWithoutChildrenDataInput {
  id: ID
  name: String
  parent: SkillUpdateOneWithoutChildrenInput
  ppreCheckup: PpreCheckupUpdateOneWithoutSkillsWorkedInput
  schoolYear: SchoolYearUpdateOneRequiredWithoutSkillsInput
  skillsConcernedPpres: PpreUpdateManyWithoutSkillsConcernedInput
  skillsToWorkPpres: PpreUpdateManyWithoutSkillsToWorkInput
}

input SkillUpdateWithoutParentDataInput {
  children: SkillUpdateManyWithoutParentInput
  id: ID
  name: String
  ppreCheckup: PpreCheckupUpdateOneWithoutSkillsWorkedInput
  schoolYear: SchoolYearUpdateOneRequiredWithoutSkillsInput
  skillsConcernedPpres: PpreUpdateManyWithoutSkillsConcernedInput
  skillsToWorkPpres: PpreUpdateManyWithoutSkillsToWorkInput
}

input SkillUpdateWithoutPpreCheckupDataInput {
  children: SkillUpdateManyWithoutParentInput
  id: ID
  name: String
  parent: SkillUpdateOneWithoutChildrenInput
  schoolYear: SchoolYearUpdateOneRequiredWithoutSkillsInput
  skillsConcernedPpres: PpreUpdateManyWithoutSkillsConcernedInput
  skillsToWorkPpres: PpreUpdateManyWithoutSkillsToWorkInput
}

input SkillUpdateWithoutSchoolYearDataInput {
  children: SkillUpdateManyWithoutParentInput
  id: ID
  name: String
  parent: SkillUpdateOneWithoutChildrenInput
  ppreCheckup: PpreCheckupUpdateOneWithoutSkillsWorkedInput
  skillsConcernedPpres: PpreUpdateManyWithoutSkillsConcernedInput
  skillsToWorkPpres: PpreUpdateManyWithoutSkillsToWorkInput
}

input SkillUpdateWithoutSkillsConcernedPpresDataInput {
  children: SkillUpdateManyWithoutParentInput
  id: ID
  name: String
  parent: SkillUpdateOneWithoutChildrenInput
  ppreCheckup: PpreCheckupUpdateOneWithoutSkillsWorkedInput
  schoolYear: SchoolYearUpdateOneRequiredWithoutSkillsInput
  skillsToWorkPpres: PpreUpdateManyWithoutSkillsToWorkInput
}

input SkillUpdateWithoutSkillsToWorkPpresDataInput {
  children: SkillUpdateManyWithoutParentInput
  id: ID
  name: String
  parent: SkillUpdateOneWithoutChildrenInput
  ppreCheckup: PpreCheckupUpdateOneWithoutSkillsWorkedInput
  schoolYear: SchoolYearUpdateOneRequiredWithoutSkillsInput
  skillsConcernedPpres: PpreUpdateManyWithoutSkillsConcernedInput
}

input SkillUpdateWithWhereUniqueWithoutParentInput {
  data: SkillUpdateWithoutParentDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpdateWithWhereUniqueWithoutPpreCheckupInput {
  data: SkillUpdateWithoutPpreCheckupDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpdateWithWhereUniqueWithoutSchoolYearInput {
  data: SkillUpdateWithoutSchoolYearDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpdateWithWhereUniqueWithoutSkillsConcernedPpresInput {
  data: SkillUpdateWithoutSkillsConcernedPpresDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpdateWithWhereUniqueWithoutSkillsToWorkPpresInput {
  data: SkillUpdateWithoutSkillsToWorkPpresDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithoutChildrenInput {
  create: SkillCreateWithoutChildrenInput!
  update: SkillUpdateWithoutChildrenDataInput!
}

input SkillUpsertWithWhereUniqueWithoutParentInput {
  create: SkillCreateWithoutParentInput!
  update: SkillUpdateWithoutParentDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithWhereUniqueWithoutPpreCheckupInput {
  create: SkillCreateWithoutPpreCheckupInput!
  update: SkillUpdateWithoutPpreCheckupDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithWhereUniqueWithoutSchoolYearInput {
  create: SkillCreateWithoutSchoolYearInput!
  update: SkillUpdateWithoutSchoolYearDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithWhereUniqueWithoutSkillsConcernedPpresInput {
  create: SkillCreateWithoutSkillsConcernedPpresInput!
  update: SkillUpdateWithoutSkillsConcernedPpresDataInput!
  where: SkillWhereUniqueInput!
}

input SkillUpsertWithWhereUniqueWithoutSkillsToWorkPpresInput {
  create: SkillCreateWithoutSkillsToWorkPpresInput!
  update: SkillUpdateWithoutSkillsToWorkPpresDataInput!
  where: SkillWhereUniqueInput!
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  children: SkillFilter
  id: StringFilter
  name: StringFilter
  NOT: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  parent: SkillWhereInput
  ppreCheckup: PpreCheckupWhereInput
  schoolYear: SchoolYearWhereInput
  skillsConcernedPpres: PpreFilter
  skillsToWorkPpres: PpreFilter
}

input SkillWhereUniqueInput {
  id: ID
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Student {
  birthDate: DateTime!
  firstName: String!
  gender: String!
  id: ID!
  lastName: String!
  password: String!
  studentYears(after: ID, before: ID, first: Int, last: Int, skip: Int): [StudentYear!]!
  username: String!
}

input StudentCreateOneWithoutStudentInput {
  connect: StudentWhereUniqueInput
  create: StudentCreateWithoutStudentYearsInput
}

input StudentCreateWithoutStudentYearsInput {
  birthDate: DateTime!
  firstName: String!
  gender: String!
  id: ID
  lastName: String!
  password: String!
  username: String!
}

input StudentUpdateOneRequiredWithoutStudentYearsInput {
  connect: StudentWhereUniqueInput
  create: StudentCreateWithoutStudentYearsInput
  update: StudentUpdateWithoutStudentYearsDataInput
  upsert: StudentUpsertWithoutStudentYearsInput
}

input StudentUpdateWithoutStudentYearsDataInput {
  birthDate: DateTime
  firstName: String
  gender: String
  id: ID
  lastName: String
  password: String
  username: String
}

input StudentUpsertWithoutStudentYearsInput {
  create: StudentCreateWithoutStudentYearsInput!
  update: StudentUpdateWithoutStudentYearsDataInput!
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  birthDate: DateTimeFilter
  firstName: StringFilter
  gender: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  password: StringFilter
  studentYears: StudentYearFilter
  username: StringFilter
}

input StudentWhereUniqueInput {
  id: ID
  username: String
}

type StudentYear {
  classroom: Classroom
  id: ID!
  ppre: Ppre
  schoolYear: SchoolYear!
  student: Student!
}

input StudentYearCreateManyWithoutStudentYearsInput {
  connect: [StudentYearWhereUniqueInput!]
  create: [StudentYearCreateWithoutSchoolYearInput!]
}

input StudentYearCreateOneWithoutStudentYearInput {
  connect: StudentYearWhereUniqueInput
  create: StudentYearCreateWithoutPpreInput
}

input StudentYearCreateWithoutClassroomInput {
  id: ID
  ppre: PpreCreateOneWithoutPpreInput
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  student: StudentCreateOneWithoutStudentInput!
}

input StudentYearCreateWithoutPpreInput {
  classroom: ClassroomCreateOneWithoutClassroomInput
  id: ID
  schoolYear: SchoolYearCreateOneWithoutSchoolYearInput!
  student: StudentCreateOneWithoutStudentInput!
}

input StudentYearCreateWithoutSchoolYearInput {
  classroom: ClassroomCreateOneWithoutClassroomInput
  id: ID
  ppre: PpreCreateOneWithoutPpreInput
  student: StudentCreateOneWithoutStudentInput!
}

input StudentYearFilter {
  every: StudentYearWhereInput
  none: StudentYearWhereInput
  some: StudentYearWhereInput
}

input StudentYearScalarWhereInput {
  AND: [StudentYearScalarWhereInput!]
  id: StringFilter
  NOT: [StudentYearScalarWhereInput!]
  OR: [StudentYearScalarWhereInput!]
}

input StudentYearUpdateInput {
  classroom: ClassroomUpdateOneWithoutStudentYearsInput
  id: ID
  ppre: PpreUpdateOneWithoutStudentYearInput
  schoolYear: SchoolYearUpdateOneRequiredWithoutStudentYearsInput
  student: StudentUpdateOneRequiredWithoutStudentYearsInput
}

input StudentYearUpdateManyDataInput {
  id: ID
}

input StudentYearUpdateManyWithoutClassroomInput {
  connect: [StudentYearWhereUniqueInput!]
  create: [StudentYearCreateWithoutClassroomInput!]
  delete: [StudentYearWhereUniqueInput!]
  deleteMany: [StudentYearScalarWhereInput!]
  disconnect: [StudentYearWhereUniqueInput!]
  set: [StudentYearWhereUniqueInput!]
  update: [StudentYearUpdateWithWhereUniqueWithoutClassroomInput!]
  updateMany: [StudentYearUpdateManyWithWhereNestedInput!]
  upsert: [StudentYearUpsertWithWhereUniqueWithoutClassroomInput!]
}

input StudentYearUpdateManyWithoutSchoolYearInput {
  connect: [StudentYearWhereUniqueInput!]
  create: [StudentYearCreateWithoutSchoolYearInput!]
  delete: [StudentYearWhereUniqueInput!]
  deleteMany: [StudentYearScalarWhereInput!]
  disconnect: [StudentYearWhereUniqueInput!]
  set: [StudentYearWhereUniqueInput!]
  update: [StudentYearUpdateWithWhereUniqueWithoutSchoolYearInput!]
  updateMany: [StudentYearUpdateManyWithWhereNestedInput!]
  upsert: [StudentYearUpsertWithWhereUniqueWithoutSchoolYearInput!]
}

input StudentYearUpdateManyWithWhereNestedInput {
  data: StudentYearUpdateManyDataInput!
  where: StudentYearScalarWhereInput!
}

input StudentYearUpdateOneRequiredWithoutPpreInput {
  connect: StudentYearWhereUniqueInput
  create: StudentYearCreateWithoutPpreInput
  update: StudentYearUpdateWithoutPpreDataInput
  upsert: StudentYearUpsertWithoutPpreInput
}

input StudentYearUpdateWithoutClassroomDataInput {
  id: ID
  ppre: PpreUpdateOneWithoutStudentYearInput
  schoolYear: SchoolYearUpdateOneRequiredWithoutStudentYearsInput
  student: StudentUpdateOneRequiredWithoutStudentYearsInput
}

input StudentYearUpdateWithoutPpreDataInput {
  classroom: ClassroomUpdateOneWithoutStudentYearsInput
  id: ID
  schoolYear: SchoolYearUpdateOneRequiredWithoutStudentYearsInput
  student: StudentUpdateOneRequiredWithoutStudentYearsInput
}

input StudentYearUpdateWithoutSchoolYearDataInput {
  classroom: ClassroomUpdateOneWithoutStudentYearsInput
  id: ID
  ppre: PpreUpdateOneWithoutStudentYearInput
  student: StudentUpdateOneRequiredWithoutStudentYearsInput
}

input StudentYearUpdateWithWhereUniqueWithoutClassroomInput {
  data: StudentYearUpdateWithoutClassroomDataInput!
  where: StudentYearWhereUniqueInput!
}

input StudentYearUpdateWithWhereUniqueWithoutSchoolYearInput {
  data: StudentYearUpdateWithoutSchoolYearDataInput!
  where: StudentYearWhereUniqueInput!
}

input StudentYearUpsertWithoutPpreInput {
  create: StudentYearCreateWithoutPpreInput!
  update: StudentYearUpdateWithoutPpreDataInput!
}

input StudentYearUpsertWithWhereUniqueWithoutClassroomInput {
  create: StudentYearCreateWithoutClassroomInput!
  update: StudentYearUpdateWithoutClassroomDataInput!
  where: StudentYearWhereUniqueInput!
}

input StudentYearUpsertWithWhereUniqueWithoutSchoolYearInput {
  create: StudentYearCreateWithoutSchoolYearInput!
  update: StudentYearUpdateWithoutSchoolYearDataInput!
  where: StudentYearWhereUniqueInput!
}

input StudentYearWhereInput {
  AND: [StudentYearWhereInput!]
  classroom: ClassroomWhereInput
  id: StringFilter
  NOT: [StudentYearWhereInput!]
  OR: [StudentYearWhereInput!]
  ppre: PpreWhereInput
  schoolYear: SchoolYearWhereInput
  student: StudentWhereInput
}

input StudentYearWhereUniqueInput {
  id: ID
}

type Teacher {
  avatar: String
  classrooms(after: ID, before: ID, first: Int, last: Int, skip: Int): [Classroom!]!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  password: String!
  role: String!
  school: School!
  username: String!
}

input TeacherCreateInput {
  avatar: String
  classroom: ClassroomCreateOneWithoutClassroomInput
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: String!
  school: SchoolCreateOneWithoutSchoolInput!
  username: String!
}

input TeacherCreateManyWithoutTeachersInput {
  connect: [TeacherWhereUniqueInput!]
  create: [TeacherCreateWithoutClassroomsInput!]
}

input TeacherCreateWithoutClassroomsInput {
  avatar: String
  createdAt: DateTime
  email: String!
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  role: String!
  school: SchoolCreateOneWithoutSchoolInput!
  username: String!
}

input TeacherCreateWithoutSchoolInput {
  avatar: String
  classrooms: ClassroomCreateManyWithoutClassroomsInput
  createdAt: DateTime
  email: String!
  firstName: String!
  id: ID
  lastName: String!
  password: String!
  role: String!
  username: String!
}

input TeacherFilter {
  every: TeacherWhereInput
  none: TeacherWhereInput
  some: TeacherWhereInput
}

input TeacherScalarWhereInput {
  AND: [TeacherScalarWhereInput!]
  avatar: NullableStringFilter
  classrooms: ClassroomFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [TeacherScalarWhereInput!]
  OR: [TeacherScalarWhereInput!]
  password: StringFilter
  role: StringFilter
  username: StringFilter
}

input TeacherUpdateInput {
  avatar: String
  classrooms: [ClassroomWhereUniqueInput!]
  email: String
  firstName: String
  lastName: String
  password: String
  role: String
  username: String
}

input TeacherUpdateManyDataInput {
  avatar: String
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  role: String
  username: String
}

input TeacherUpdateManyWithoutClassroomsInput {
  connect: [TeacherWhereUniqueInput!]
  create: [TeacherCreateWithoutClassroomsInput!]
  delete: [TeacherWhereUniqueInput!]
  deleteMany: [TeacherScalarWhereInput!]
  disconnect: [TeacherWhereUniqueInput!]
  set: [TeacherWhereUniqueInput!]
  update: [TeacherUpdateWithWhereUniqueWithoutClassroomsInput!]
  updateMany: [TeacherUpdateManyWithWhereNestedInput!]
  upsert: [TeacherUpsertWithWhereUniqueWithoutClassroomsInput!]
}

input TeacherUpdateManyWithoutSchoolInput {
  connect: [TeacherWhereUniqueInput!]
  create: [TeacherCreateWithoutSchoolInput!]
  delete: [TeacherWhereUniqueInput!]
  deleteMany: [TeacherScalarWhereInput!]
  disconnect: [TeacherWhereUniqueInput!]
  set: [TeacherWhereUniqueInput!]
  update: [TeacherUpdateWithWhereUniqueWithoutSchoolInput!]
  updateMany: [TeacherUpdateManyWithWhereNestedInput!]
  upsert: [TeacherUpsertWithWhereUniqueWithoutSchoolInput!]
}

input TeacherUpdateManyWithWhereNestedInput {
  data: TeacherUpdateManyDataInput!
  where: TeacherScalarWhereInput!
}

input TeacherUpdateWithoutClassroomsDataInput {
  avatar: String
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  role: String
  school: SchoolUpdateOneRequiredWithoutTeachersInput
  username: String
}

input TeacherUpdateWithoutSchoolDataInput {
  avatar: String
  classrooms: ClassroomUpdateManyWithoutTeachersInput
  createdAt: DateTime
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  role: String
  username: String
}

input TeacherUpdateWithWhereUniqueWithoutClassroomsInput {
  data: TeacherUpdateWithoutClassroomsDataInput!
  where: TeacherWhereUniqueInput!
}

input TeacherUpdateWithWhereUniqueWithoutSchoolInput {
  data: TeacherUpdateWithoutSchoolDataInput!
  where: TeacherWhereUniqueInput!
}

input TeacherUpsertWithWhereUniqueWithoutClassroomsInput {
  create: TeacherCreateWithoutClassroomsInput!
  update: TeacherUpdateWithoutClassroomsDataInput!
  where: TeacherWhereUniqueInput!
}

input TeacherUpsertWithWhereUniqueWithoutSchoolInput {
  create: TeacherCreateWithoutSchoolInput!
  update: TeacherUpdateWithoutSchoolDataInput!
  where: TeacherWhereUniqueInput!
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  avatar: NullableStringFilter
  classrooms: ClassroomFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  password: StringFilter
  role: StringFilter
  school: SchoolWhereInput
  username: StringFilter
}

input TeacherWhereUniqueInput {
  email: String
  id: ID
  username: String
}
